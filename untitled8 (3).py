# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XEgWNzUhYAD3n6xRPhS8YT-Hu9znJ0Lb
"""

# تثبيت مكتبة TensorFlow إذا لم تكن مثبتة
!pip install tensorflow

# استيراد المكتبات
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, classification_report
from sklearn.linear_model import LogisticRegression, LinearRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# قراءة البيانات من الملف
df = pd.read_csv('/content/synthetic_dataset.csv')  # أو اسم الملف الذي رفعته

# عرض أول صفوف
df.head()

# اختيار الأعمدة المهمة
df = df[['Price', 'Discount', 'Stock']]

# تحويل القيم النصية في 'Stock' إلى أرقام
df['Stock'] = df['Stock'].replace(['In Stock', 'Out of Stock', 'Unknown'], [1, 0, -1])

# حذف القيم المفقودة
df.dropna(inplace=True)

X = df[['Price', 'Discount']]
y = df['Stock']

# تقسيم البيانات
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# توحيد البيانات
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

def evaluate_model(model, name):
    y_pred = model.predict(X_test_scaled)
    if hasattr(model, "predict_proba") or isinstance(model, LinearRegression):
        y_pred = np.round(y_pred)
    print(f"\n=== {name} ===")
    print("Accuracy:", accuracy_score(y_test, y_pred))
    print(classification_report(y_test, y_pred))

dt = DecisionTreeClassifier()
dt.fit(X_train_scaled, y_train)
evaluate_model(dt, "Decision Tree")

rf = RandomForestClassifier()
rf.fit(X_train_scaled, y_train)
evaluate_model(rf, "Random Forest")

knn = KNeighborsClassifier()
knn.fit(X_train_scaled, y_train)
evaluate_model(knn, "KNN")

nb = GaussianNB()
nb.fit(X_train_scaled, y_train)
evaluate_model(nb, "Naive Bayes")

svm = SVC()
svm.fit(X_train_scaled, y_train)
evaluate_model(svm, "SVM")

lr = LinearRegression()
lr.fit(X_train_scaled, y_train)
evaluate_model(lr, "Linear Regression")

ann = Sequential()
ann.add(Dense(16, input_dim=2, activation='relu'))
ann.add(Dense(8, activation='relu'))
ann.add(Dense(1, activation='linear'))  # للإخراج العددي

ann.compile(loss='mean_squared_error', optimizer='adam')
ann.fit(X_train_scaled, y_train, epochs=50, verbose=0)

# توقعات
y_pred_ann = ann.predict(X_test_scaled)
y_pred_ann = np.round(y_pred_ann).flatten()
print("\n=== ANN ===")
print("Accuracy:", accuracy_score(y_test, y_pred_ann))
print(classification_report(y_test, y_pred_ann))

import os

os.makedirs('/content/Data/Result', exist_ok=True)

# نموذج Linear Regression
lr = LinearRegression()
lr.fit(X_train_scaled, y_train)

# توقعات
y_pred_linear = np.round(lr.predict(X_test_scaled))

# حفظ جميع النتائج
pd.DataFrame(y_test).to_csv('/content/Data/Result/y_test.csv', index=False)
pd.DataFrame(y_pred_ann).to_csv('/content/Data/Result/y_pred_ann.csv', index=False)
pd.DataFrame(y_pred_linear.reshape(-1,1)).to_csv('/content/Data/Result/y_pred_linear.csv', index=False)

# 1. حفظ y_test (القيم الحقيقية)
pd.DataFrame(y_test).to_csv('/content/Data/Result/y_test.csv', index=False)

# 2. توقعات ANN (تم حسابها مسبقاً في y_pred_ann)
pd.DataFrame(y_pred_ann).to_csv('/content/Data/Result/y_pred_ann.csv', index=False)

# 3. Linear Regression
y_pred_linear = np.round(lr.predict(X_test_scaled))
pd.DataFrame(y_pred_linear).to_csv('/content/Data/Result/y_pred_linear.csv', index=False)

# 4. Decision Tree
y_pred_dt = dt.predict(X_test_scaled)
pd.DataFrame(y_pred_dt).to_csv('/content/Data/Result/y_pred_dt.csv', index=False)

# 5. Random Forest
y_pred_rf = rf.predict(X_test_scaled)
pd.DataFrame(y_pred_rf).to_csv('/content/Data/Result/y_pred_rf.csv', index=False)

# 6. Naive Bayes
y_pred_nb = nb.predict(X_test_scaled)
pd.DataFrame(y_pred_nb).to_csv('/content/Data/Result/y_pred_nb.csv', index=False)

# 7. KNN
y_pred_knn = knn.predict(X_test_scaled)
pd.DataFrame(y_pred_knn).to_csv('/content/Data/Result/y_pred_knn.csv', index=False)

# 8. SVM
y_pred_svm = svm.predict(X_test_scaled)
pd.DataFrame(y_pred_svm).to_csv('/content/Data/Result/y_pred_svm.csv', index=False)

# إنشاء جدول بالدقة لكل نموذج
model_results = pd.DataFrame({
    'Model': ['Decision Tree', 'Random Forest', 'KNN', 'Naive Bayes', 'SVM', 'Linear Regression', 'ANN'],
    'Accuracy': [
        accuracy_score(y_test, dt.predict(X_test_scaled)),
        accuracy_score(y_test, rf.predict(X_test_scaled)),
        accuracy_score(y_test, knn.predict(X_test_scaled)),
        accuracy_score(y_test, nb.predict(X_test_scaled)),
        accuracy_score(y_test, svm.predict(X_test_scaled)),
        accuracy_score(y_test, np.round(lr.predict(X_test_scaled))),
        accuracy_score(y_test, y_pred_ann)
    ]
})

# عرض النتائج
print(model_results)

# حفظ النتائج إلى ملف CSV داخل مجلد Result
model_results.to_csv('/content/Data/Result/model_accuracy_results.csv', index=False)

# إنشاء جدول بالدقة لكل نموذج
model_results = pd.DataFrame({
    'Model': ['Decision Tree', 'Random Forest', 'KNN', 'Naive Bayes', 'SVM', 'Linear Regression', 'ANN'],
    'Accuracy': [
        accuracy_score(y_test, dt.predict(X_test_scaled)),
        accuracy_score(y_test, rf.predict(X_test_scaled)),
        accuracy_score(y_test, knn.predict(X_test_scaled)),
        accuracy_score(y_test, nb.predict(X_test_scaled)),
        accuracy_score(y_test, svm.predict(X_test_scaled)),
        accuracy_score(y_test, np.round(lr.predict(X_test_scaled))),
        accuracy_score(y_test, y_pred_ann)
    ]
})

# عرض النتائج
print(model_results)

# حفظ النتائج إلى ملف CSV داخل مجلد Result
model_results.to_csv('/content/Data/Result/model_accuracy_results.csv', index=False)

import pandas as pd
import numpy as np

# توقعات لكل نموذج
y_pred_dt = dt.predict(X_test_scaled)
y_pred_rf = rf.predict(X_test_scaled)
y_pred_knn = knn.predict(X_test_scaled)
y_pred_nb = nb.predict(X_test_scaled)
y_pred_svm = svm.predict(X_test_scaled)
y_pred_lr = np.round(lr.predict(X_test_scaled))  # تقريب القيم المستمرة
# توقعات الشبكة العصبية موجودة مسبقاً: y_pred_ann

# حفظ التوقعات في ملفات CSV داخل مجلد Result
pd.DataFrame(y_pred_dt).to_csv('/content/Data/Result/y_pred_dt.csv', index=False)
pd.DataFrame(y_pred_rf).to_csv('/content/Data/Result/y_pred_rf.csv', index=False)
pd.DataFrame(y_pred_knn).to_csv('/content/Data/Result/y_pred_knn.csv', index=False)
pd.DataFrame(y_pred_nb).to_csv('/content/Data/Result/y_pred_nb.csv', index=False)
pd.DataFrame(y_pred_svm).to_csv('/content/Data/Result/y_pred_svm.csv', index=False)
pd.DataFrame(y_pred_lr).to_csv('/content/Data/Result/y_pred_lr.csv', index=False)
pd.DataFrame(y_pred_ann).to_csv('/content/Data/Result/y_pred_ann.csv', index=False)

# وأخيراً، نحفظ بيانات y_test الحقيقية للمقارنة
pd.DataFrame(y_test).to_csv('/content/Data/Result/y_test.csv', index=False)

import pandas as pd
from sklearn.metrics import accuracy_score
import numpy as np

# إنشاء DataFrame لعرض دقة النماذج
model_results = pd.DataFrame({
    'Model': ['Decision Tree', 'Random Forest', 'KNN', 'Naive Bayes', 'SVM', 'Linear Regression', 'ANN'],
    'Accuracy': [
        accuracy_score(y_test, dt.predict(X_test_scaled)),
        accuracy_score(y_test, rf.predict(X_test_scaled)),
        accuracy_score(y_test, knn.predict(X_test_scaled)),
        accuracy_score(y_test, nb.predict(X_test_scaled)),
        accuracy_score(y_test, svm.predict(X_test_scaled)),
        accuracy_score(y_test, np.round(lr.predict(X_test_scaled))),
        accuracy_score(y_test, y_pred_ann)
    ]
})

# عرض النتائج
print(model_results)

import matplotlib.pyplot as plt
import seaborn as sns

# ضبط حجم الرسم
plt.figure(figsize=(10,6))
sns.barplot(data=model_results, x='Model', y='Accuracy', palette='viridis')
plt.title('Model Accuracy Comparison', fontsize=16)
plt.ylabel('Accuracy')
plt.xlabel('Model')
plt.xticks(rotation=45)
plt.ylim(0, 1)
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(10,6))
sns.barplot(data=model_results, x='Model', y='Accuracy', palette='viridis')
plt.title('Model Accuracy Comparison', fontsize=16)
plt.ylabel('Accuracy')
plt.xlabel('Model')
plt.xticks(rotation=45)
plt.ylim(0, 1)
plt.grid(True)
plt.tight_layout()
plt.savefig('/content/Data/Result/model_accuracy_plot.png')  # حفظ الصورة في مجلد النتائج
plt.show()

# حفظ جدول المقارنة في ملف CSV داخل مجلد Result
model_results.to_csv('/content/Data/Result/model_accuracy_results.csv', index=False)

from sklearn.metrics import classification_report

# إنشاء مجلد النتائج إذا لم يكن موجوداً (احترازي)
import os
os.makedirs('/content/Data/Result', exist_ok=True)

# قائمة النماذج والتوقعات الخاصة بها
model_reports = {
    "decision_tree": dt.predict(X_test_scaled),
    "random_forest": rf.predict(X_test_scaled),
    "knn": knn.predict(X_test_scaled),
    "naive_bayes": nb.predict(X_test_scaled),
    "svm": svm.predict(X_test_scaled),
    "linear_regression": np.round(lr.predict(X_test_scaled)),
    "ann": y_pred_ann  # هذا موجود مسبقًا
}

# حفظ تقارير التصنيف في ملفات .txt
for model_name, predictions in model_reports.items():
    report = classification_report(y_test, predictions)
    with open(f"/content/Data/Result/{model_name}_report.txt", "w") as file:
        file.write(report)

import matplotlib.pyplot as plt

# قائمة النماذج والدقة الخاصة بكل نموذج (من model_results)
models = model_results['Model']
accuracies = model_results['Accuracy']

# إعداد الرسم البياني
plt.figure(figsize=(10, 6))
bars = plt.bar(models, accuracies, color='skyblue')
plt.xlabel('Model')
plt.ylabel('Accuracy')
plt.title('Model Accuracy Comparison')
plt.ylim(0, 1)

# إضافة القيم فوق الأعمدة
for bar in bars:
    yval = bar.get_height()
    plt.text(bar.get_x() + bar.get_width()/2.0, yval + 0.01, f"{yval:.2f}",
             ha='center', va='bottom')

# حفظ الصورة في مجلد النتائج
plt.tight_layout()
plt.savefig('/content/Data/Result/model_accuracy_plot.png')
plt.show()

# حفظ بيانات التدريب (السمات فقط)
pd.DataFrame(X_train_scaled, columns=['Price', 'Discount']).to_csv('/content/Data/x.csv', index=False)

# حفظ بيانات الاختبار (السمات فقط)
pd.DataFrame(X_test_scaled, columns=['Price', 'Discount']).to_csv('/content/Data/x_test.csv', index=False)

# حفظ الهدف (الـ labels) للتدريب
pd.DataFrame(y_train).to_csv('/content/Data/y.csv', index=False)

# حفظ الهدف للاختبار
pd.DataFrame(y_test).to_csv('/content/Data/y_test.csv', index=False)

import os
import pandas as pd

# إنشاء المجلد إذا لم يكن موجود
os.makedirs('/content/preprocessed_data', exist_ok=True)

# حفظ بيانات التدريب (السمات)
pd.DataFrame(X_train_scaled, columns=['Price', 'Discount']).to_csv('/content/preprocessed_data/x.csv', index=False)

# حفظ بيانات الاختبار (السمات)
pd.DataFrame(X_test_scaled, columns=['Price', 'Discount']).to_csv('/content/preprocessed_data/x_test.csv', index=False)

# حفظ الهدف (الـ labels) للتدريب
pd.DataFrame(y_train).to_csv('/content/preprocessed_data/y.csv', index=False)

# حفظ الهدف للاختبار
pd.DataFrame(y_test).to_csv('/content/preprocessed_data/y_test.csv', index=False)

import shutil

# ضغط المجلد إلى ملف zip
shutil.make_archive('/content/preprocessed_data', 'zip', '/content/preprocessed_data')

import shutil

# ضغط مجلد النتائج
shutil.make_archive('/content/Data/Result', 'zip', '/content/Data/Result')

import pandas as pd

# حفظ ملفات البيانات المعالجة (preprocessed data)
pd.DataFrame(X).to_csv('/content/x.csv', index=False)
pd.DataFrame(X_test).to_csv('/content/x_test.csv', index=False)
pd.DataFrame(y).to_csv('/content/y.csv', index=False)
pd.DataFrame(y_test).to_csv('/content/y_test.csv', index=False)

import os
import shutil

base_dir = '/content/github'

# إنشاء مجلد preprocessed_data
preprocessed_data_dir = os.path.join(base_dir, 'data', 'preprocessed_data')
os.makedirs(preprocessed_data_dir, exist_ok=True)

# نسخ الملفات
shutil.copy('/content/x.csv', preprocessed_data_dir)
shutil.copy('/content/x_test.csv', preprocessed_data_dir)
shutil.copy('/content/y.csv', preprocessed_data_dir)
shutil.copy('/content/y_test.csv', preprocessed_data_dir)

import pandas as pd

# حفظ توقعات النماذج
pd.DataFrame(y_pred_dt).to_csv('/content/y_pred_dt.csv', index=False)      # Decision Tree
pd.DataFrame(y_pred_rf).to_csv('/content/y_pred_rf.csv', index=False)      # Random Forest
pd.DataFrame(y_pred_knn).to_csv('/content/y_pred_knn.csv', index=False)    # KNN
pd.DataFrame(y_pred_nb).to_csv('/content/y_pred_nb.csv', index=False)      # Naive Bayes
pd.DataFrame(y_pred_svm).to_csv('/content/y_pred_svm.csv', index=False)    # SVM
pd.DataFrame(y_pred_linear).to_csv('/content/y_pred_linear.csv', index=False)  # Linear Regression
pd.DataFrame(y_pred_ann).to_csv('/content/y_pred_ann.csv', index=False)    # ANN

# مسار مجلد Results داخل مجلد github
results_dir = os.path.join(base_dir, 'Results')
os.makedirs(results_dir, exist_ok=True)

# نسخ ملفات التوقعات
model_preds = {
    'predictions_DecisionTree.csv': '/content/y_pred_dt.csv',
    'predictions_RandomForest.csv': '/content/y_pred_rf.csv',
    'predictions_KNN.csv': '/content/y_pred_knn.csv',
    'predictions_NaiveBayes.csv': '/content/y_pred_nb.csv',
    'predictions_SVM.csv': '/content/y_pred_svm.csv',
    'predictions_LinearRegression.csv': '/content/y_pred_linear.csv',
    'predictions_ANN.csv': '/content/y_pred_ann.csv',
}
for filename, path in model_preds.items():
    shutil.copy(path, os.path.join(results_dir, filename))

import os
import shutil

# مسار ملف البيانات الأصلية الحالي
source_file = './synthetic_dataset.csv'  # عدل المسار إذا مختلف

# إنشاء مجلد github/original data إذا لم يكن موجوداً
target_dir = './github/original data'
os.makedirs(target_dir, exist_ok=True)

# مسار الملف الجديد داخل المجلد
target_file = os.path.join(target_dir, 'synthetic_dataset.csv')

# نسخ الملف بدون تعديل
shutil.copy2(source_file, target_file)

print(f"تم نسخ البيانات الأصلية إلى: {target_file}")

import shutil
shutil.copytree('github', '/مسار/الحفظ/الذي/تريده/github')

import shutil
from google.colab import files

# ضغط مجلد github إلى ملف zip باسم github_backup.zip
shutil.make_archive('github_backup', 'zip', 'github')

# تحميل الملف المضغوط إلى جهازك
files.download('github_backup.zip')

import seaborn as sns
import matplotlib.pyplot as plt

# Histogram لعمود Price
plt.figure(figsize=(8,5))
sns.histplot(df['Price'], kde=True, bins=30)
plt.title('Histogram of Price')
plt.xlabel('Price')
plt.ylabel('Frequency')
plt.show()

# Histogram لعمود Discount
plt.figure(figsize=(8,5))
sns.histplot(df['Discount'], kde=True, bins=30, color='orange')
plt.title('Histogram of Discount')
plt.xlabel('Discount')
plt.ylabel('Frequency')
plt.show()

# Countplot لعمود Stock
plt.figure(figsize=(8,5))
sns.countplot(data=df, x='Stock')
plt.title('Countplot of Stock')
plt.xlabel('Stock')
plt.ylabel('Count')
plt.show()

plt.subplot(1, 2, 2)
sns.countplot(x='Stock', data=df, palette='viridis')
plt.title('Countplot for Stock Status')
plt.xlabel('Stock')
plt.ylabel('Count')

plt.tight_layout()
plt.show()